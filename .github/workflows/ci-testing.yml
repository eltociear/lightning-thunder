name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the main branch
  push:
    branches: [main]
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

defaults:
  run:
    shell: bash

jobs:

  pytester:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-11, windows-2022]
        python-version: ['3.10']
        requires: ['latest', 'oldest']

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35
    env:
      TORCH_URL: "https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html"

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Ubuntu
      if: runner.os == 'ubuntu'
      run: |
        sudo apt-get install -y graphviz

    - name: Set min. dependencies
      if: matrix.requires == 'oldest'
      run: |
        for fpath in ('requirements.txt', 'requirements/test.txt'):
            req = open(fpath).read().replace('>=', '==')
            open(fpath, 'w').write(req)
      shell: python

    - name: Get pip cache dir
      id: pip-cache
      run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-pip-

    - name: Install package & dependencies
      run: |
        pip --version
        pip install -e '.[test]' -U --find-links ${TORCH_URL}
        pip list
      shell: bash

    - name: Tests
      env:
        CI: "true"
      run: |
        coverage run --source thunder -m \
          pytest thunder/tests/ -v -n 2 --random-order-seed=$GITHUB_RUN_ID --durations=250

    - name: Statistics
      run: |
        coverage report
        coverage xml

    #- name: Upload coverage to Codecov
    #  uses: codecov/codecov-action@v3
    #  with:
    #    token: ${{ secrets.CODECOV_TOKEN }}
    #    file: ./coverage.xml
    #    flags: unittests
    #    env_vars: OS,PYTHON
    #    name: codecov-umbrella
    #    fail_ci_if_error: false


  testing-guardian:
    runs-on: ubuntu-latest
    needs: pytester
    if: always()
    steps:
    - run: echo "${{ needs.pytester.result }}"
    - name: failing...
      if: needs.pytester.result == 'failure'
      run: exit 1
    - name: cancelled or skipped...
      if: contains(fromJSON('["cancelled", "skipped"]'), needs.pytester.result)
      timeout-minutes: 1
      run: sleep 90
