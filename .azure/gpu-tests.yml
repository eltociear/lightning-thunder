# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "main"
      - "release/*"
      - "refs/tags/*"

pr:
  branches:
    include:
      - "main"
      - "release/*"
  paths:
    include:
      - ".azure/gpu-tests.yml"
      - "thunder/**"
    exclude:
      - "*.md"
      - "**/*.md"

jobs:
  - job: testing
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "25"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    pool: 'lit-rtx-3090'
    variables:
      DEVICES: $( python -c 'name = "$(Agent.Name)" ; gpus = name.split("_")[-1] if "_" in name else "0"; print(gpus)' )
    container:
      image: "nvidia/cuda:11.7.0-cudnn8-runtime-ubuntu22.04"
      options: "--gpus=all --shm-size=8g -v /usr/bin/docker:/tmp/docker:ro"
    workspace:
      clean: all
    steps:

    - script: |
        container_id=$(head -1 /proc/self/cgroup|cut -d/ -f3)
        /tmp/docker exec -t -u 0 $container_id \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$container_id"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        apt-get -y update -qq --fix-missing
        apt-get -y install --no-install-recommends \
          build-essential \
          python3.10 \
          python3.10-dev \
          python3-distutils \
          python3-pip \
          pciutils \
          curl
        update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
      displayName: 'Install sys & python'  # CUDA image if completely blind

    - bash: |
        echo $(DEVICES)
        echo "CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES"
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        which python && which pip
        python --version
        pip --version
        pip list
      displayName: 'Image info & NVIDIA'

    - bash: |
        sudo apt-get install -y graphviz
        # pip install -e .[test] -U \
        #   --pre -f https://download.pytorch.org/whl/nightly/cu117/torch_nightly.html
        pip install torch --pre -f https://download.pytorch.org/whl/nightly/cu117/torch_nightly.html
        pip install -r requirements/test.txt
        python setup.py develop
      displayName: 'Install package & ...'

    - bash: |
        set -e
        pip list
        nvidia-smi -L
        python -c "import torch ; assert torch.cuda.is_available(), 'missing GPU'"
        python -c "import torch ; v = torch.__version__ ; assert str(v).startswith('2'), v"
        pip list
      displayName: 'Sanity check / details'

    - bash: coverage run --source thunder -m pytest thunder/tests/ -v
      displayName: 'Testing: standard'

    - bash: |
        coverage report
        coverage xml
        
        # https://docs.codecov.com/docs/codecov-uploader
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) \
          --flags=unittests,gpu --name="codecov-umbrella-gpu" --env=OS,PYTHON
      displayName: 'Statistics'

    - bash: |
        # python benchmarks/ops_benchmark.py nanogpt-gelu
        # python benchmarks/nvfuser_benchmarks.py nanogpt-mlp -x thunder
        # python benchmarks/nvfuser_benchmarks.py nanogpt-gelu -x thunder
      displayName: 'Benchmarks'
