trigger:
  tags:
    include: ['*']
  branches:
    include:
      - "main"
      - "release/*"
      - "refs/tags/*"

pr:
  branches:
    include: ['*']

jobs:
  - job: testing
    strategy:
      matrix:
        'cuda 11.7':
          docker-image: 'nvidia/cuda:11.7.0-cudnn8-runtime-ubuntu22.04'
          agent-pool: 'lit-rtx-3090'
          PYTHON_VERSION: '3.10'
          CUDA_VERSION_MM: '117'
        'cuda 11.7 | nightly':
          docker-image: 'nvidia/cuda:11.7.0-cudnn8-runtime-ubuntu22.04'
          agent-pool: 'lit-rtx-3090'
          versions: 'nightly'
          PYTHON_VERSION: '3.10'
          CUDA_VERSION_MM: '117'
        'cuda 12.1':
          docker-image: 'nvidia/cuda:12.1.1-cudnn8-runtime-ubuntu22.04'
          agent-pool: 'lit-rtx-3090'
          PYTHON_VERSION: '3.10'
          CUDA_VERSION_MM: '121'
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "35"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    pool: "$(agent-pool)"
    variables:
      DEVICES: $( python -c 'name = "$(Agent.Name)" ; gpus = name.split("_")[-1] if "_" in name else "0"; print(gpus)' )
      TORCH_HOME: "/var/tmp/torch"
      PIP_CACHE_DIR: "/var/tmp/pip"
      PYTHONHASHSEED: "0"
    container:
      image: "$(docker-image)"
      options: "--gpus=all --shm-size=16g -v /usr/bin/docker:/tmp/docker:ro -v /var/tmp:/var/tmp"
    workspace:
      clean: all
    steps:

    - script: |
        container_id=$(head -1 /proc/self/cgroup|cut -d/ -f3)
        /tmp/docker exec -t -u 0 $container_id \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$container_id"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        apt-get -y update -qq --fix-missing
        apt-get -y install --no-install-recommends \
          build-essential \
          python$PYTHON_VERSION \
          python$PYTHON_VERSION-dev \
          python3-distutils \
          python3-pip \
          pciutils \
          curl
        update-alternatives --install /usr/bin/python python /usr/bin/python$PYTHON_VERSION 1
        update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
      displayName: 'Install sys & python'  # CUDA image if completely blind

    - bash: |
        echo $(DEVICES)
        echo "CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES"
        echo "CUDA_VERSION_MM=$CUDA_VERSION_MM"
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        which python && which pip
        python --version
        pip --version
        pip list
      displayName: 'Image info & NVIDIA'

    - bash: |
        sudo apt-get install -y graphviz
        # pip install -e .[test] -U \
        #   --pre -f https://download.pytorch.org/whl/nightly/cu117/torch_nightly.html
        pip install torch --pre -f "https://download.pytorch.org/whl/nightly/cu$CUDA_VERSION_MM/torch_nightly.html" -U
        pip install -r requirements/test.txt
        python setup.py develop
      displayName: 'Install package & ...'
    - bash: |
        pip install "nvfuser-cu$CUDA_VERSION_MM" --pre
        patch-nvfuser
      condition: eq(variables['versions'], 'nightly')
      displayName: 'Overwrite nvFuser'

    - bash: |
        set -e
        pip list
        python -c "import torch ; assert torch.cuda.is_available(), 'missing GPU'"
        python -c "import torch ; v = torch.__version__ ; assert str(v).startswith('2'), v"
      displayName: 'Sanity check / details'

    - bash: |
        coverage run --source thunder -m \
          pytest thunder/tests/ -v --numprocesses 9
      displayName: 'Testing'

    - bash: |
        coverage report
        coverage xml

        # https://docs.codecov.com/docs/codecov-uploader
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) \
          --flags=unittests,gpu --name="codecov-gpu" --env=OS,PYTHON
      displayName: 'Statistics'

    #- bash: |
    #     python benchmarks/ops_benchmark.py nanogpt-gelu
    #     python benchmarks/nvfuser_benchmarks.py nanogpt-mlp -x thunder
    #     python benchmarks/nvfuser_benchmarks.py nanogpt-gelu -x thunder
    #  displayName: 'Benchmarks'
